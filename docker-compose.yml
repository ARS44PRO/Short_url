volumes:
  postgres-vol:
    driver: local

networks:
  postgres-net:
    driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres:16.1-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGPORT=${POSTGRES_PORT}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-vol:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    expose:
      - "${POSTGRES_PORT}"
    networks:
      - postgres-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  backend:
    container_name: app_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      APP_PORT: ${APP_PORT}
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    working_dir: /app
    networks:
      - postgres-net
    restart: unless-stopped

  frontend:
    container_name: app_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      APP_PORT: ${APP_PORT}
      NODE_ENV: ${NODE_ENV}
    ports:
      - "${FRONT_PORT}:${FRONT_PORT}"
    working_dir: /app
    restart: unless-stopped
